// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Random = require("bs-platform/lib/js/random.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

var signs = /* array */[
  /* ROCK */1,
  /* PAPER */2,
  /* SCISSORS */3
];

function stringOfSign(sign) {
  switch (sign) {
    case 0 : 
        return "no sign";
    case 1 : 
        return "ROCK";
    case 2 : 
        return "PAPER";
    case 3 : 
        return "SCISSORS";
    
  }
}

function showImg(signToDisplay) {
  if (signToDisplay !== 0) {
    return React.createElement("img", {
                src: "../src/img/" + (stringOfSign(signToDisplay) + ".png")
              });
  } else {
    return React.createElement("div", undefined);
  }
}

function getResult(winAgainst, loseAgainst, signOpponent, self) {
  if (Caml_obj.caml_equal(winAgainst, signOpponent)) {
    return Curry._1(self[/* send */3], /* Win */0);
  } else if (Caml_obj.caml_equal(loseAgainst, signOpponent)) {
    return Curry._1(self[/* send */3], /* Lose */1);
  } else {
    return Curry._1(self[/* send */3], /* Equality */2);
  }
}

function play(sign, self) {
  Curry._1(self[/* send */3], /* GetSignPlayed */Block.__(0, [sign]));
  var signOpponent = Caml_array.caml_array_get(signs, Random.$$int(3));
  Curry._1(self[/* send */3], /* GetSignOpponent */Block.__(1, [signOpponent]));
  switch (sign) {
    case 0 : 
        return /* () */0;
    case 1 : 
        return getResult(/* SCISSORS */3, /* PAPER */2, signOpponent, self);
    case 2 : 
        return getResult(/* ROCK */1, /* SCISSORS */3, signOpponent, self);
    case 3 : 
        return getResult(/* PAPER */2, /* ROCK */1, signOpponent, self);
    
  }
}

var component = ReasonReact.reducerComponent("App");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("h1", undefined, "Shifumi with ReasonReact"), React.createElement("div", {
                              className: "row"
                            }, React.createElement("div", undefined, React.createElement("button", {
                                      onClick: (function (_event) {
                                          return Curry._1(self[/* send */3], /* Play */Block.__(2, [/* ROCK */1]));
                                        })
                                    }, "ROCK"), React.createElement("button", {
                                      onClick: (function (_event) {
                                          return Curry._1(self[/* send */3], /* Play */Block.__(2, [/* PAPER */2]));
                                        })
                                    }, "PAPER"), React.createElement("button", {
                                      onClick: (function (_event) {
                                          return Curry._1(self[/* send */3], /* Play */Block.__(2, [/* SCISSORS */3]));
                                        })
                                    }, "SCISSORS")), React.createElement("p", undefined, self[/* state */1][/* result */4])), React.createElement("div", {
                              className: "container"
                            }, React.createElement("div", {
                                  className: "col"
                                }, showImg(self[/* state */1][/* signPlayed */2]), React.createElement("h3", undefined, "Player: " + String(self[/* state */1][/* wins */0]))), React.createElement("div", {
                                  className: "col"
                                }, showImg(self[/* state */1][/* signOpponent */3]), React.createElement("h3", undefined, "IA: " + String(self[/* state */1][/* losses */1])))));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* wins */0,
                      /* losses */0,
                      /* signPlayed : NO_SIGN */0,
                      /* signOpponent : NO_SIGN */0,
                      /* result */""
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* wins */state[/* wins */0] + 1 | 0,
                                  /* losses */state[/* losses */1],
                                  /* signPlayed */state[/* signPlayed */2],
                                  /* signOpponent */state[/* signOpponent */3],
                                  /* result */"Congrats you win !"
                                ]]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* wins */state[/* wins */0],
                                  /* losses */state[/* losses */1] + 1 | 0,
                                  /* signPlayed */state[/* signPlayed */2],
                                  /* signOpponent */state[/* signOpponent */3],
                                  /* result */"You lose"
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* wins */state[/* wins */0],
                                  /* losses */state[/* losses */1],
                                  /* signPlayed */state[/* signPlayed */2],
                                  /* signOpponent */state[/* signOpponent */3],
                                  /* result */"Equality"
                                ]]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* wins */state[/* wins */0],
                                  /* losses */state[/* losses */1],
                                  /* signPlayed */action[0],
                                  /* signOpponent */state[/* signOpponent */3],
                                  /* result */state[/* result */4]
                                ]]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* wins */state[/* wins */0],
                                  /* losses */state[/* losses */1],
                                  /* signPlayed */state[/* signPlayed */2],
                                  /* signOpponent */action[0],
                                  /* result */state[/* result */4]
                                ]]);
                  case 2 : 
                      var signPlayed = action[0];
                      return /* SideEffects */Block.__(1, [(function (param) {
                                    return play(signPlayed, param);
                                  })]);
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.signs = signs;
exports.stringOfSign = stringOfSign;
exports.showImg = showImg;
exports.getResult = getResult;
exports.play = play;
exports.component = component;
exports.make = make;
/* component Not a pure module */
